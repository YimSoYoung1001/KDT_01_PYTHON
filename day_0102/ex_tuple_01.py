# -----------------------------------------------------------------
# 튜플 (Tuple) : 읽기 전용의 리스트라고 함
# - 저장 후 수정, 삭제, 추가, 변경 안됨!
# - 용도 : 변경되면 안되는 데이터를 저장
# - 예시 : 성별, 주민번호, 국가코드, 프로그램 상에서 변경되면 안되는 데이터 ...
# - 문법 : (데이터1, 데이터2, ... , 데이터n)
#          데이터1, 데이터2, ... , 데이터n
#         (데이터1,)       데이터1,
# -----------------------------------------------------------------
# 다른 프로그램 : 변수는 계속 데이터 변경 , 상수는 변경 안됨
# 파이선: 튜플이라는 데이터 타입을 통해 변경 못하는 데이터

# 튜플 데이터 생성 ---------------------------------------------------
# 성별, 주민번호로 저장하기
myInfo = ('F', '1234567-123456')
print(f'myInfo => {type(myInfo)}, {myInfo}')

# 성별 데이터 읽기
print(f'myInfo[0] => {myInfo[0]}')
print(f'myInfo[-1] => {myInfo[-1]}')

# 성별 데이터 변경 ==> 여자 -> 남자
# 미지원 기능
#myInfo[0] = 'M'

# 성별 데이터 삭제
# 미지원 기능
#del myInfo[0]

# 생일 데이터 추가
# 미지원 기능

# *, + 는 가능

# 튜플 => 리스트로 형변환 시켜면 수정가능
myInfo = list(myInfo)
myInfo[0] = 'M'
myInfo[1].replace('2','3',1)
#myInfo[1] = myInfo[1].replace('2', '3', 1)    과대말로는 이렇게 써야한다고,,
print(myInfo)

# 리스트 ==> 튜플
myInfo = tuple(myInfo)
print(myInfo)


# --------------------------------------------------------------------
# 1개 원소를 가진 튜플 생성
# --------------------------------------------------------------------
myData = '82'
print(f'type(myData) : {type(myData)}')
myData2 = ('82')    #소괄호는 가독성을 위해서 한다
print(f'type(myData2) : {type(myData2)}')

myData3 = '82',    #콤마를 찍는 순간 str에서 tuple로 인식됨
print(f'type(myData3) : {type(myData3)}')
myData4 = ('82',)  #괄호유무보다는 ,가 영향미침
print(f'type(myData4) : {type(myData4)}')


# cf) --------------------------------
a = [1,2,3,4,5,['a','b']]
print(a.count(1))
print(a.count([['a']])) #이거는 덩어리 안의 원소이기 떄문에 별개다.
print(a.count(['a','b']))
# -------------------------------------
