"""
출력 기능의 내장함수 print()
"""
# 1개 데이터 화면 출력 ================
print(1000)  #output이 아닌 모니터(화면)으로 나간다.

# 2개 데이터 화면 출력 ================
print(1000, 222)
print(100, "good luck")

# 여러개 데이터 화면 출력===============
print("ABC", 5., "1000", "happynewyear")
data = print(100, 'good luck')
print(data)
# print 함수에 커서 갖다대면 화살표 마지막에 'none'이 뜬다. 즉, 반환값은 none
# 왜 결과가 none이냐면 그냥 print는 화면에 표현해주는거뿐

# 데이터가 없는 경우 화면 출력 ===========
print( )

# -------------------------------------
# 데이터 출력을 좀 더 편하게 하는 방법들
# -> 문자열과 숫자가 섞여 있는 경우가 대부분
# -------------------------------------
# [출력] 오늘은 2024년 12월 27일 입니다.
print('오늘은 2024년 12월 27일 입니다.')

year = 2024
month = 12
day = 27

print('오늘은', year, '년', month, '월', day, '일입니다.')

# 변수를 str에서 적용해서 출력하는 방법 --- (1)  '%알파벳1개' => 서식 지정자 방식
# %d decimal fixed point    ===> '당신의 나이는 %d 입니다.'  %age
# %f floating point         ===> '평균이 %f 입니다.'        %avg
# %s string                 ===> '당신의 고향은 %s 입니다.'  %name

age = 30
avg = 9.8
name = '네이밍'

print('당신의 나이는 %d세 입니다.' %age) #원래는 쉼표로 나누어서 해야하는데 이게 편하다
print('평균이 %f점 입니다.' %avg)
print('당신의 이름은 %s입니다.' %name)

print('당신의 나이는 %d세, 평균은 %f점, 이름은 %s이군요.'%(age, avg, name))


# 변수를 str에서 적용해서 출력하는 방법 --- (2) f'{변수명}'  => f-스트링 방식
print(f'당신의 나이는 {age}세 입니다.')
#print('당신의 나이는 {age}세 입니다.')
print(F'당신의 나이는 {age}세 입니다.')
print(F'당신의 나이는 {age}세이고, 평균은 {avg}점, 고향은 {name}이군요')

# -----------------------------------------
# [실습1] 본인 이름, 전공, 나이를 메모리 저장하기
#        저장된 정보를 아래와 같은 형태로 출력하기
#        이름: ㅇㅇㅇ
#        전공: ㅇㅇㅇㅇ
#        나이: ㅇㅇ세
# ------------------------------------------
name = "임소영"
school = "간호학과"
age = "25"

print(f'이름: {name}')
print(f'전공: {school}')
print(f'나이: {age}세')

# ---------------------------------------------------
# 특별한 의미를 가지는 문자 조합 => 이스케이프 문자
# \(백슬러쉬) + 알파벳1개
# \n => new line 약자. 줄바꿈
# \t => tab 약자. 키보드 탭 키 만큼 간격띄움
# ---------------------------------------------------

print(f'이름: {name}\n전공: {school}\n나이: {age}세') #여기서 f뺴도 줄바꿈은 적용된다
print(f'이름: {name}\t전공: {school}\t나이: {age}세')

# ---------------------------------------------------
# print() 함수에서 여러 개의 데이터를 분리해서 출력해주는 방법
# print (data, sep, end)
# - 기본 : 공백
# - 변경 : sep 매개변수 -> 여러 개 데이터를 화면에 보기 좋게 분리시켜주는 방법 설정
# ---------------------------------------------------
print("홍","길덩")  #자동으로 공백 설정됨
print("홍","길덩","의적", sep='') #기본값인 공백을 안쓰고 싶어욧
print("홍","길덩","의적", sep='*') #기본값인 공백이 아닌 별 쓰고 싶어욧

# ---------------------------------------------------
# print() 함수에서 데이터 화면 출력 후 끝에 추가하는 문자 지정
# print (data, sep, end)
# - 기본 : 줄바꿈 이스케이프 문자 \n
# - 변경 : end 매개변수 -> 화면 출력 후 원하는 문자를 지정 가능
# ---------------------------------------------------
print("A", end='')  #원래는 자동으로 \n이었는데 다른거 할래욧
print("B", end='')
print("C")          #얘는 기본값이 \n이다. C\n으로 설정됨


#---------------------------------------------------
# [실습] 아래와 같이 출력이 되도록 코드를 작성하세요. 단 print 함수는 1개만 사용
#       ABCDEFG
#       123456789
#       ABCDEFG
#---------------------------------------------------
# 방법1 - 이스케이프 문자 사용
print("ABCDEFG\n123456789\nABCDEFG")
# 방법2 - print()함수의 sep
print("ABCDEFG", 123456789, "ABCDEFG", sep='\n')
# 방법3 - print() 함수 여러개 사용하는 경우
print("ABCDEFG")
print(123456789)
print("ABCDEFG")


